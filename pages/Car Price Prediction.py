import streamlit as st
import joblib
import numpy as np

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = joblib.load("catboost_model.joblib")

st.title("üöó Car Price Prediction (USD)")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á (USD)")

# Input
fuel_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á", ["Petrol (‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô)", "Diesel (‡∏î‡∏µ‡πÄ‡∏ã‡∏•)", "Electric (‡πÑ‡∏ü‡∏ü‡πâ‡∏≤)"])
mileage = st.number_input("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô (5-35 ‡∏Å‡∏°./‡∏•‡∏¥‡∏ï‡∏£)", min_value=5.0, value=5.0, step=0.01, max_value=35.0)
engine_cc = st.number_input("‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå (800-5000 cc)", min_value=800, value=800, step=100,max_value=5000)
car_age = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏ñ (0-30 ‡∏õ‡∏µ)", min_value=0, value=0, step=1, max_value=30)
owner_count = st.selectbox("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", ["1", "2", "3", "4", "5"])
accidents_reported = st.selectbox("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)", ["0","1","2","3","4","5"])
insurance_valid = st.selectbox("‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", ["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ", "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"])
color = st.selectbox("‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", ["Red", "Blue", "Silver", "Black", "White", "Gray"])
tranmission = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå", ["‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"])
brand = st.selectbox("‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", ["Nissan", "Volkswagen", "BMW", "Tesla", "Honda", "Chevrolet", "Hyundai", "Toyota", "Kia", "Ford"])
service_history = st.selectbox("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤", ["Full (‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)", "Partial (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)", "None (‡πÑ‡∏°‡πà‡∏°‡∏µ)"])

# ‚úÖ Mapping (encode ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà train)
fuel_map = {"Petrol (‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô)": 2, "Diesel (‡∏î‡∏µ‡πÄ‡∏ã‡∏•)": 1, "Electric (‡πÑ‡∏ü‡∏ü‡πâ‡∏≤)": 0}
insurance_map = {"‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ": 1, "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏": 0}
service_map = {"None (‡πÑ‡∏°‡πà‡∏°‡∏µ)": 0, "Partial (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)": 1, "Full (‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô)": 2}
trans_map = {"‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥": 1, "‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤": 0}
color_map = {"Red": 1, "Blue": 0, "Silver": 2, "Black": 3, "White": 5, "Gray": 4}
brand_map = {"Nissan":6,"Volkswagen":2,"BMW":1,"Tesla":0,"Honda":5,"Chevrolet":8,"Hyundai":4,"Toyota":7,"Kia":3,"Ford":9}

fuel_type_encoded = fuel_map[fuel_type]
insurance_encoded = insurance_map[insurance_valid]
service_encoded = service_map[service_history]
trans_encoded = trans_map[tranmission]
color_encoded = color_map[color]
brand_encoded = brand_map[brand]
owner_count = int(owner_count)
accidents_reported = int(accidents_reported)

# ‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô array (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° features ‡∏ï‡∏≠‡∏ô train)
input_data = np.array([[mileage, engine_cc, car_age, owner_count,
                        accidents_reported, insurance_encoded, 
                        service_encoded, fuel_type_encoded,
                        brand_encoded, trans_encoded, color_encoded]])

import time
if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤"):
    with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...'):
        time.sleep(4)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        prediction = model.predict(input_data)
    st.success(f"‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ: {prediction[0]:,.2f} USD")
